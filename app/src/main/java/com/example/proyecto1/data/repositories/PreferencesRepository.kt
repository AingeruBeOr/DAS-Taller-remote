package com.example.proyecto1.data.repositories

import android.content.Context
import androidx.datastore.core.DataStore
import androidx.datastore.preferences.core.Preferences
import androidx.datastore.preferences.core.edit
import androidx.datastore.preferences.core.stringPreferencesKey
import androidx.datastore.preferences.preferencesDataStore
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.flow.map
import javax.inject.Inject


/*
 * Oficial documentation: https://developer.android.com/topic/libraries/architecture/datastore
 */

/**
 * Añadimos la variable dataStore al contexto
 */
val Context.dataStore: DataStore<Preferences> by preferencesDataStore(name = "settings")

/**
 * Esta clase se encarga de gestionar las preferencias de la aplicación. En este momento, se encarga
 * de gestionar el tema seleccionado por el cliente
 */
class PreferencesRepository @Inject constructor(
    private val context: Context
) {
    // Defining keys from DataStore
    private val THEME = stringPreferencesKey("theme")
    private val LAST_USER = stringPreferencesKey("lastUser")

    /**
     * Conseguir el tema actual del usuario.
     */
    fun getUserTheme(): Flow<String> {
        return context.dataStore.data.map { preferences ->
            preferences[THEME] ?: "Blue"
        }
    }

    /**
     * Collects the first preference item generated by DataStore [Flow] and returns the user theme.
     * More info in: https://developer.android.com/topic/libraries/architecture/datastore#synchronous
     */
    suspend fun getUserThemeSnapshot(): String {
        return context.dataStore.data.first()[THEME] ?: "Blue"
    }

    /**
     * Guardar el tema actual del cliente.
     */
    suspend fun saveUserTheme(theme: String) {
        context.dataStore.edit { preferences ->
            preferences[THEME] = theme
        }
    }

    /**
     * Guardar el útlimo usuario que ha iniciado sesión
     */
    suspend fun saveLastUserName(username: String) {
        context.dataStore.edit { preferences ->
            preferences[LAST_USER] = username
        }
    }

    suspend fun getLastUserName() : String? {
        return context.dataStore.data.first()[LAST_USER]
    }
}
